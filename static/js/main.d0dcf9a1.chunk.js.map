{"version":3,"sources":["serviceWorker.js","login/styles.js","login/login.js","signup/styles.js","signup/signup.js","chatselector/styles.js","chatselectorheader/styles.js","chatselectorheader/chatselectorheader.js","chatselectoravatar/styles.js","chatselectoravatar/chatselectoravatar.js","chatselector/chatselector.js","dashboard/styles.js","convodisplay/styles.js","newchat/styles.js","newchat/newchat.js","convodisplayheader/styles.js","convodisplayheader/convodisplayheader.js","convodisplay/convodisplay.js","chatinput/styles.js","chatinput/chatinput.js","dashboard/dashboard.js","index.js"],"names":["Boolean","window","location","hostname","match","loginStyles","buttonstyle","marginTop","marginBottom","main","backgroundImage","width","height","display","linkstyle","fontSize","cursor","paperstyles","margin","padding","firebase","require","LoginComponent","submitForm","e","preventDefault","state","email","password","toDashboard","setState","loginerror","userInputHandler","target","name","value","toSignup","props","history","push","a","auth","signInWithEmailAndPassword","then","u","catch","err","toString","currentUser","classes","this","className","Paper","align","onSubmit","FormControl","fullWidth","InputLabel","htmlFor","Input","id","onChange","startAdornment","InputAdornment","position","type","Button","variant","color","Link","onClick","React","Component","withStyles","signupStyles","SignupComponent","toLogin","firstname","lastname","passwordconf","addToFirebase","signuperror","createUserWithEmailAndPassword","theUser","user","firestore","collection","doc","set","console","log","inputstyle","chatselectorStyles","list","top","boxSizing","zIndex","overflow","background","left","borderRight","listItemContainer","backgroundColor","borderColor","listItemUnread","fontWeight","marginRight","unread","unreadDot","marginLeft","chatselectorheaderStyles","justifyContent","alignItems","autocompletestyles","createstyles","iconbuttonstyles","borderRadius","ChatSelectorHeaderComponent","onChangeHandler","event","reason","chatList","chats","map","chat","users","filter","currentuser","selectIndex","indexOf","setSelectedchatIndex","setSelectedmessages","changeSelectedIndexofChatSelector","setSelectedFirstName","setSelectedLastName","setHasRead","handleNewMessageClick","displayNewChatWindow","setHasSelectedOnce","autocompleteValue","friendsList","includes","Autocomplete","clearOnEscape","options","getOptionLabel","option","join","edge","renderInput","params","TextField","label","IconButton","chatselectoravatarStyles","avatar","ChatSelectorAvatarComponent","Avatar","firstinit","lastinit","fullname","ChatSelectorComponent","wasLastSender","messages","length","sender","setFullName","otherUser","filteredOtherUser","charAt","handleListItemClick","index","selectedIndex","setSelectedFirstandLastName","setSelectedIndex","userList","List","hasRead","key","ListItem","button","selected","ListItemText","primary","Typography","dashboardStyles","title","testscroll","overflowY","convodisplayStyles","convoheader","flexDirection","border","messagesUser","float","clear","wordWrap","messagesOther","newchatStyles","borderBottom","marginleft","buttoncontainer","NewChatComponent","handleClose","document","getElementById","thevalue","getAttribute","trim","recipient","setNewRecipient","setKnownRecipient","componentDidMount","freeSolo","onClose","logout","convodisplayheaderStyles","avataruserWrapper","ConvoDisplayHeaderComponent","hasSelectedOnce","convodisplayComponent","known","knownRecipient","container","scrollTo","scrollHeight","componentDidUpdate","newChatWindow","selectedmessages","reverse","message","selectedFirstName","selectedLastName","chatinputStyles","bottom","borderTop","chatTextBox","ChatInputComponent","onFocusHandler","onKeyDownHandler","sendMessage","handleInputChange","onKeyDown","autoComplete","onFocus","DashboardComponent","docName","getDocName","messageLength","selectedchatIndex","lastSender","update","signOut","newRecipient","chatSelectorComponent","current","validRecipient","replace","newRecipientDocName","buildNewRecipientDocName","timestamp","Date","now","findIndexOfRecipient","setFirstAndLastName","FieldValue","arrayUnion","sort","get","getUsers","docs","data","valid","selectedUser","componentWillMount","onAuthStateChanged","where","onSnapshot","docSnapshot","thechats","theusers","createRef","ref","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","routing","path","exact","component","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.d0dcf9a1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const loginStyles = () => ({\n  buttonstyle: {\n    marginTop: \"10px\",\n    marginBottom: \"10px\",\n  },\n  main: {\n    //backgroundImage: \"linear-gradient(#83a4d4, #b6fbff)\",\n    backgroundImage: \"linear-gradient(#014871, #D7EDE2)\",\n    width: \"100vw\",\n    height: \"100vh\",\n    display: \"flex\",\n  },\n  linkstyle: {\n    fontSize: 14,\n    cursor: \"pointer\",\n  },\n  paperstyles: {\n    width: 300,\n    margin: \"auto\",\n    padding: \"10px\",\n  },\n});\n\nexport default loginStyles;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport loginStyles from \"./styles\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Input from \"@material-ui/core/Input\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\nimport Lock from \"@material-ui/icons/Lock\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport Link from \"@material-ui/core/Link\";\n\nconst firebase = require(\"firebase\");\n\nclass LoginComponent extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: \"\",\n      password: \"\",\n      currentUser: null,\n      loginerror: \"\",\n    };\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className={classes.main}>\n        <Paper className={classes.paperstyles}>\n          <h1 align=\"center\">Login Page</h1>\n          <form onSubmit={this.submitForm}>\n            <FormControl fullWidth>\n              <div>\n                <InputLabel htmlFor=\"emailInput\">Enter Your Email</InputLabel>\n                <Input\n                  fullWidth\n                  name=\"email\"\n                  id=\"emailInput\"\n                  onChange={this.userInputHandler}\n                  startAdornment={\n                    <InputAdornment position=\"start\">\n                      <AccountCircle />\n                    </InputAdornment>\n                  }\n                ></Input>\n              </div>\n            </FormControl>\n            <FormControl fullWidth>\n              <div>\n                <InputLabel htmlFor=\"passwordInput\">\n                  Enter Your Password\n                </InputLabel>\n                <Input\n                  type=\"password\"\n                  fullWidth\n                  name=\"password\"\n                  id=\"passwordInput\"\n                  onChange={this.userInputHandler}\n                  startAdornment={\n                    <InputAdornment position=\"start\">\n                      <Lock />\n                    </InputAdornment>\n                  }\n                ></Input>\n              </div>\n            </FormControl>\n\n            <h5>{this.state.loginerror}</h5>\n\n            <Button\n              className={classes.buttonstyle}\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              fullWidth\n            >\n              Log In\n            </Button>\n\n            <Link onClick={this.toSignup} className={classes.linkstyle}>\n              Sign Up!\n            </Link>\n          </form>\n        </Paper>\n      </div>\n    );\n  }\n\n  submitForm = (e) => {\n    e.preventDefault();\n\n    if (this.state.email != \"\" && this.state.password != \"\") {\n      this.toDashboard();\n    } else {\n      this.setState({\n        loginerror: \"Error: Please enter a username and password.\",\n      });\n    }\n  };\n\n  userInputHandler = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  toSignup = () => {\n    this.props.history.push(\"/signup\");\n  };\n\n  toDashboard = async () => {\n    await firebase\n      .auth()\n      .signInWithEmailAndPassword(this.state.email, this.state.password)\n      .then((u) => {\n        this.props.history.push(\"/dashboard\");\n      })\n      .catch((err) => {\n        this.setState({ loginerror: err.toString() });\n      });\n  };\n}\n\nexport default withStyles(loginStyles)(LoginComponent);\n","const signupStyles = () => ({\n  buttonstyle: {\n    marginTop: \"10px\",\n    marginBottom: \"10px\",\n  },\n  main: {\n    backgroundImage: \"linear-gradient(#83a4d4, #b6fbff)\",\n    width: \"100vw\",\n    height: \"100vh\",\n    display: \"flex\",\n  },\n  linkstyle: {\n    fontSize: 14,\n    cursor: \"pointer\",\n  },\n  paperstyles: {\n    width: 300,\n    margin: \"auto\",\n    padding: \"10px\",\n  },\n});\n\nexport default signupStyles;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport signupStyles from \"./styles\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport { firestore } from \"firebase\";\nimport Input from \"@material-ui/core/Input\";\nimport Paper from \"@material-ui/core/Paper\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\nimport Lock from \"@material-ui/icons/Lock\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport Email from \"@material-ui/icons/Email\";\nimport Link from \"@material-ui/core/Link\";\n\nconst firebase = require(\"firebase\");\n\nclass SignupComponent extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      email: \"\",\n      password: \"\",\n      passwordconf: \"\",\n      signuperror: \"\",\n    };\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className={classes.main}>\n        <Paper className={classes.paperstyles}>\n          <h1 align=\"center\">Sign Up!</h1>\n\n          <form onSubmit={this.submitForm}>\n            <FormControl fullWidth>\n              <div>\n                <InputLabel htmlFor=\"firstnameInput\">First Name</InputLabel>\n                <Input\n                  fullWidth\n                  name=\"firstname\"\n                  id=\"firstnameInput\"\n                  onChange={this.userInputHandler}\n                  startAdornment={\n                    <InputAdornment position=\"start\">\n                      <AccountCircle />\n                    </InputAdornment>\n                  }\n                ></Input>\n              </div>\n            </FormControl>\n            <FormControl fullWidth>\n              <div>\n                <InputLabel htmlFor=\"lastnameInput\">Last Name</InputLabel>\n                <Input\n                  fullWidth\n                  name=\"lastname\"\n                  id=\"lastnameInput\"\n                  onChange={this.userInputHandler}\n                  startAdornment={\n                    <InputAdornment position=\"start\">\n                      <AccountCircle />\n                    </InputAdornment>\n                  }\n                ></Input>\n              </div>\n            </FormControl>\n            <FormControl fullWidth>\n              <div>\n                <InputLabel htmlFor=\"emailInput\">Enter Your Email</InputLabel>\n                <Input\n                  fullWidth\n                  name=\"email\"\n                  id=\"emailInput\"\n                  onChange={this.userInputHandler}\n                  startAdornment={\n                    <InputAdornment position=\"start\">\n                      <Email />\n                    </InputAdornment>\n                  }\n                ></Input>\n              </div>\n            </FormControl>\n            <FormControl fullWidth>\n              <div>\n                <InputLabel\n                  htmlFor=\"passwordInput\"\n                  className={classes.inputstyle}\n                >\n                  Enter Your Password\n                </InputLabel>\n                <Input\n                  type=\"password\"\n                  fullWidth\n                  name=\"password\"\n                  id=\"passwordInput\"\n                  onChange={this.userInputHandler}\n                  startAdornment={\n                    <InputAdornment position=\"start\">\n                      <Lock />\n                    </InputAdornment>\n                  }\n                ></Input>\n              </div>\n            </FormControl>\n            <FormControl fullWidth>\n              <div>\n                <InputLabel htmlFor=\"passwordconfInput\">\n                  Confirm Your Password\n                </InputLabel>\n                <Input\n                  type=\"password\"\n                  fullWidth\n                  name=\"passwordconf\"\n                  id=\"passwordconfInput\"\n                  onChange={this.userInputHandler}\n                  startAdornment={\n                    <InputAdornment position=\"start\">\n                      <Lock />\n                    </InputAdornment>\n                  }\n                ></Input>\n              </div>\n            </FormControl>\n\n            <h5>{this.state.signuperror}</h5>\n            <Button\n              className={classes.buttonstyle}\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              fullWidth\n            >\n              Sign Up\n            </Button>\n            <Link onClick={this.toLogin} className={classes.linkstyle}>\n              Log In!\n            </Link>\n          </form>\n        </Paper>\n      </div>\n    );\n  }\n\n  toLogin = () => {\n    this.props.history.push(\"/login\");\n  };\n\n  submitForm = (e) => {\n    e.preventDefault();\n    if (this.state.firstname != \"\" && this.state.lastname != \"\") {\n      if (this.state.password === this.state.passwordconf) {\n        this.addToFirebase();\n      } else {\n        this.setState({ signuperror: \"The passwords do not match!\" });\n      }\n    } else {\n      this.setState({ signuperror: \"Please enter your first and last name!\" });\n    }\n  };\n\n  userInputHandler = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n  addToFirebase = () => {\n    firebase\n      .auth()\n      .createUserWithEmailAndPassword(this.state.email, this.state.password)\n      .then((u) => {\n        const theUser = {\n          email: u.user.email,\n          firstname: this.state.firstname,\n          lastname: this.state.lastname,\n        };\n        firestore()\n          .collection(\"users\")\n          .doc(this.state.email)\n          .set(theUser)\n          .then(this.props.history.push(\"/dashboard\"));\n        console.log(\"signup up successfully\");\n        //console.log(u);\n      })\n      .catch((err) => {\n        this.setState({ signuperror: err.toString() });\n        console.log(err.toString());\n      });\n  };\n}\n\nexport default withStyles(signupStyles)(SignupComponent);\n","const chatselectorStyles = () => ({\n  main: {\n    /*width: \"30vw\",\n    background: \"lightblue\",\n    left: \"0\",\n    position: \"fixed\",\n    overflow: \"auto\",\n    height: \"100vh\",*/\n    //boxSizing: \"padding-box\",\n    //paddingTop: \"60px\",\n  },\n  list: {\n    //position: \"absolute\",\n    top: \"80px\",\n    boxSizing: \"border-box\",\n    width: \"30vw\",\n    zIndex: \"-1\",\n    position: \"fixed\",\n    overflow: \"auto\",\n    //height: \"100vh\",\n    height: \"calc(100vh - 80px)\",\n    background: \"#F0F8FF\",\n    left: \"0\",\n    borderRight: \"1px solid grey\",\n  },\n  listItemContainer: {\n    //display: \"flex\",\n    //alignItems: \"center\",\n    backgroundColor: \"red\",\n    borderColor: \"red\",\n  },\n  listItemUnread: {\n    fontWeight: \"900\",\n    marginRight: \"30px\",\n  },\n  unread: {\n    background: \"#DBDBDB\",\n  },\n  unreadDot: {\n    color: \"#1976d2\",\n    marginLeft: \"300px\",\n    marginRight: \"10px\",\n  },\n});\n\nexport default chatselectorStyles;\n","const chatselectorheaderStyles = () => ({\n  main: {\n    padding: \"10px\",\n    display: \"flex\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\",\n    background: \"#F0F8FF\",\n    height: \"80px\",\n    position: \"fixed\",\n    width: \"30vw\",\n    borderRight: \"1px solid grey\",\n    zIndex: \"1\",\n    boxSizing: \"border-box\",\n    //borderColor: \"coral\",\n    //marginTop: \"-60px\",\n  },\n  autocompletestyles: {\n    width: \"300px\",\n    padding: \"20px\",\n    //borderRadius: \"15px\"\n  },\n  /*iconcontainer: {\n    width: \"40px\",\n    height: \"40px\",\n    background: \"lightgreen\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-around\",\n    \"&:hover\": {\n      cursor: \"pointer\",\n    },\n    \"&:focus\": {\n      outline: \"0\",\n      borderColor: \"#45a29e\",\n    },\n  },*/\n  createstyles: {\n    fontSize: \"30px\",\n  },\n  iconbuttonstyles: {\n    width: \"70px\",\n    borderRadius: \"10px\",\n    //borderColor: \"grey\",\n    //background: \"#E0EEEE\",\n    \"&:hover\": {},\n\n    marginRight: \"20px\",\n  },\n});\n\nexport default chatselectorheaderStyles;\n","import React from \"react\";\nimport chatselectorheaderStyles from \"./styles.js\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Create from \"@material-ui/icons/Create\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n\nclass ChatSelectorHeaderComponent extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      autocompleteValue: \"\",\n    };\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    const chatList = this.props.chats.map(\n      (chat) => chat.users.filter((email) => email != this.props.currentuser)[0]\n    );\n\n    const userList = this.props.users;\n    const friendsList = userList.filter((user) =>\n      chatList.includes(user.email)\n    );\n    console.log(this.props.chats);\n\n    return (\n      <div className={classes.main}>\n        <Autocomplete\n          clearOnEscape\n          value={this.state.autocompleteValue}\n          id=\"selector-friends-list\"\n          options={friendsList}\n          getOptionLabel={(option) => {\n            if (option.firstname) {\n              return [option.firstname, option.lastname].join(\" \");\n            } else {\n              return option;\n            }\n          }}\n          className={classes.autocompletestyles}\n          onChange={(event, value, reason) =>\n            this.onChangeHandler(event, value, reason)\n          }\n          edge=\"start\"\n          renderInput={(params) => (\n            <TextField {...params} label=\"Search Friends\" variant=\"outlined\" />\n          )}\n        />\n        <IconButton\n          className={classes.iconbuttonstyles}\n          onClick={this.handleNewMessageClick}\n          color=\"primary\"\n        >\n          <Create className={classes.createstyles} />\n        </IconButton>\n      </div>\n    );\n  }\n\n  onChangeHandler = async (event, value, reason) => {\n    if (value) {\n      if (reason == \"select-option\") {\n        const chatList = this.props.chats.map(\n          (chat) =>\n            chat.users.filter((email) => email != this.props.currentuser)[0]\n        );\n        const selectIndex = chatList.indexOf(value.email);\n        console.log(selectIndex);\n        await this.props.setSelectedchatIndex(selectIndex);\n        await this.props.setSelectedmessages();\n        await this.props.changeSelectedIndexofChatSelector(selectIndex);\n\n        await this.props.setSelectedFirstName(value.firstname);\n        await this.props.setSelectedLastName(value.lastname);\n        await this.props.setHasRead();\n      }\n\n      //this.props.changeSelectedIndexofChatSelector(selectIndex);\n    }\n  };\n\n  handleNewMessageClick = () => {\n    this.props.displayNewChatWindow();\n    this.props.setHasSelectedOnce();\n  };\n}\n\nexport default withStyles(chatselectorheaderStyles)(\n  ChatSelectorHeaderComponent\n);\n","const chatselectoravatarStyles = () => ({\n  main: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    marginLeft: \"35px\",\n    boxSizing: \"border-box\",\n    height: \"50px\",\n    width: \"50px\",\n  },\n  name: {\n    marginLeft: \"20px\",\n    boxSizing: \"border-box\",\n  },\n});\n\nexport default chatselectoravatarStyles;\n","import React from \"react\";\nimport chatselectoravatarStyles from \"./styles.js\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport { Avatar } from \"@material-ui/core\";\n\nclass ChatSelectorAvatarComponent extends React.Component {\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div>\n        <div className={classes.main}>\n          <Avatar className={classes.avatar}>\n            {this.props.firstinit + this.props.lastinit}\n          </Avatar>\n          <div className={classes.name}>{this.props.fullname}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(chatselectoravatarStyles)(\n  ChatSelectorAvatarComponent\n);\n","import React from \"react\";\nimport chatselectorStyles from \"./styles.js\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ChatSelectorHeaderComponent from \"../chatselectorheader/chatselectorheader\";\nimport ChatSelectorAvatarComponent from \"../chatselectoravatar/chatselectoravatar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Badge from \"@material-ui/core/Badge\";\nimport FiberManualRecordIcon from \"@material-ui/icons/FiberManualRecord\";\n\nclass ChatSelectorComponent extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: \"\",\n      //for which item is highlighted\n      selectedIndex: null,\n    };\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className={classes.main}>\n        <ChatSelectorHeaderComponent\n          displayNewChatWindow={this.props.displayNewChatWindow}\n          setHasSelectedOnce={this.props.setHasSelectedOnce}\n          chats={this.props.chats}\n          users={this.props.users}\n          currentuser={this.props.currentuser}\n          setSelectedchatIndex={this.props.setSelectedchatIndex}\n          setSelectedmessages={this.props.setSelectedmessages}\n          changeSelectedIndexofChatSelector={\n            this.props.changeSelectedIndexofChatSelector\n          }\n          setSelectedFirstName={this.props.setSelectedFirstName}\n          setSelectedLastName={this.props.setSelectedLastName}\n          setHasRead={this.props.setHasRead}\n        ></ChatSelectorHeaderComponent>\n        <div className={classes.list}>\n          <List>\n            {this.props.chats.map((chat, index) => {\n              console.log(chat.hasRead);\n              console.log(this.wasLastSender(chat));\n              if (chat.hasRead == false && this.wasLastSender(chat) == false) {\n                return (\n                  <div key={index}>\n                    <ListItem\n                      button\n                      selected={this.state.selectedIndex === index}\n                      onClick={(e) => {\n                        this.handleListItemClick(index);\n                      }}\n                      className={classes.unread}\n                    >\n                      <ListItemText\n                        primary={\n                          <div>\n                            <Typography className={classes.listItemUnread}>\n                              {this.setFullName(chat)}\n                            </Typography>\n                          </div>\n                        }\n                        //primary={this.setFullName(chat) + \"new\"}\n                      ></ListItemText>\n                    </ListItem>\n                  </div>\n                );\n              } else {\n                return (\n                  <div key={index}>\n                    <ListItem\n                      button\n                      selected={this.state.selectedIndex === index}\n                      onClick={(e) => {\n                        this.handleListItemClick(index);\n                      }}\n                    >\n                      <ListItemText\n                        primary={this.setFullName(chat)}\n                      ></ListItemText>\n                    </ListItem>\n                  </div>\n                );\n              }\n            })}\n          </List>\n        </div>\n      </div>\n    );\n  }\n\n  //checking if the current user is the last sender\n  wasLastSender = (chat) => {\n    const lastSender = chat.messages[chat.messages.length - 1].sender;\n    return lastSender === this.props.currentuser;\n    /*const messageLength = this.props.chats[this.props.selectedchatIndex]\n      .messages.length;\n    const lastSender = this.props.chats[this.props.selectedchatIndex].messages[\n      messageLength - 1\n    ].sender;\n    return lastSender === this.props.currentuser;*/\n  };\n\n  setFullName = (chat) => {\n    const otherUser = chat.users.filter(\n      (user) => user !== this.props.currentuser\n    );\n\n    const filteredOtherUser = this.props.users.filter((user) =>\n      otherUser.includes(user.email)\n    );\n\n    /*return filteredOtherUser.map((user) =>\n      [user.firstname, user.lastname].join(\" \")\n    );*/\n\n    const firstname = filteredOtherUser\n      .map((user) => user.firstname)\n      .toString();\n    const firstinit = firstname.charAt(0);\n\n    const lastname = filteredOtherUser.map((user) => user.lastname).toString();\n    const lastinit = lastname.charAt(0);\n\n    return (\n      <ChatSelectorAvatarComponent\n        /*fullname={filteredOtherUser.map((user) =>\n          [user.firstname, user.lastname].join(\" \")\n        )}*/\n        firstinit={firstinit}\n        lastinit={lastinit}\n        fullname={firstname + \" \" + lastname}\n      ></ChatSelectorAvatarComponent>\n    );\n  };\n\n  handleListItemClick = async (index) => {\n    //set selected index so that selected chat stays highlighted\n    await this.setState({ selectedIndex: index });\n\n    await this.props.setSelectedchatIndex(index);\n    await this.props.setSelectedmessages();\n    await this.setSelectedFirstandLastName(index);\n    await this.props.setHasRead();\n  };\n\n  setSelectedIndex = async (index) => {\n    await this.setState({ selectedIndex: index });\n  };\n\n  setSelectedFirstandLastName = async (index) => {\n    //Send the first and last name of the selection to the dashboard\n    const chatList = this.props.chats.map(\n      (chat) => chat.users.filter((email) => email != this.props.currentuser)[0]\n    );\n    const userList = this.props.users;\n    const friendsList = userList.filter((user) =>\n      chatList.includes(user.email)\n    );\n    console.log(friendsList);\n    await this.props.setSelectedFirstName(friendsList[index].firstname);\n    await this.props.setSelectedLastName(friendsList[index].lastname);\n  };\n}\n\nexport default withStyles(chatselectorStyles)(ChatSelectorComponent);\n","const dashboardStyles = () => ({\n  main: {\n    margin: 0,\n    padding: 0,\n    background: \"red\"\n  },\n  title: {\n    background: \"red\"\n  },\n  testscroll: {\n    margin: \"20px\",\n    width: \"70%\",\n    marginLeft: \"30%\",\n    position: \"absolute\",\n    top: \"100px\",\n    overflowY: \"scroll\"\n  }\n});\n\nexport default dashboardStyles;\n","const convodisplayStyles = () => ({\n  convoheader: {\n    width: \"70vw\",\n    height: \"80px\",\n    //height: \"50px\"\n    marginLeft: \"30%\",\n    background: \"#F0FFFF\",\n    padding: \"20px\",\n    position: \"fixed\",\n    zIndex: \"1\",\n    boxSizing: \"border-box\",\n  },\n  messages: {\n    display: \"flex\",\n    flexDirection: \"column-reverse\",\n    alignItems: \"center\",\n    width: \"70vw\",\n    marginLeft: \"30%\",\n    position: \"absolute\",\n    //top: \"50px\",\n    top: \"80px\",\n    overflow: \"auto\",\n    //height: \"calc(100vh - 100px)\",\n    height: \"calc(100vh - 150px)\",\n    background: \"#FFFFFE\",\n    //overflowY: \"scroll\",\n    boxSizing: \"border-box\",\n    //padding: \"10px\",\n    border: \"10px #FFFFFE solid\",\n\n    //need to somehow get padding\n    //maybe psudoelement?\n    //the padding works without using display flex\n  },\n  messagesUser: {\n    width: \"30%\",\n    background: \"#1976d2\",\n    float: \"right\",\n    clear: \"both\",\n    padding: \"20px\",\n    borderRadius: \"15px\",\n    marginLeft: \"65%\",\n    wordWrap: \"break-word\",\n    boxSizing: \"border-box\",\n    marginTop: \"10px\",\n    color: \"#FFFFFD\",\n    //margin: \"auto\"\n  },\n  messagesOther: {\n    width: \"30%\",\n    background: \"#EBECE4\",\n    float: \"left\",\n    clear: \"both\",\n    padding: \"20px\",\n    borderRadius: \"15px\",\n    marginRight: \"65%\",\n    wordWrap: \"break-word\",\n    boxSizing: \"border-box\",\n    marginTop: \"10px\",\n    //margin: \"auto\"\n  },\n});\n\nexport default convodisplayStyles;\n","const newchatStyles = () => ({\n  convoheader: {\n    width: \"70vw\",\n    height: \"80px\",\n    //height: \"50px\"\n    marginLeft: \"30%\",\n    background: \"#F0F8FF\",\n    padding: \"20px\",\n    position: \"fixed\",\n    zIndex: \"1\",\n    boxSizing: \"border-box\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    borderBottom: \"1px solid grey\",\n  },\n  messages: {\n    display: \"flex\",\n    flexDirection: \"column-reverse\",\n    alignItems: \"center\",\n    width: \"70vw\",\n    marginLeft: \"30%\",\n    position: \"absolute\",\n    //top: \"50px\",\n    top: \"80px\",\n    overflow: \"auto\",\n    //height: \"calc(100vh - 100px)\",\n    height: \"calc(100vh - 130px)\",\n    background: \"yellow\",\n    //overflowY: \"scroll\",\n    boxSizing: \"border-box\",\n    //padding: \"10px\",\n    border: \"10px yellow solid\",\n\n    //need to somehow get padding\n    //maybe psudoelement?\n    //the padding works without using display flex\n  },\n  messagesUser: {\n    width: \"30%\",\n    background: \"coral\",\n    float: \"right\",\n    clear: \"both\",\n    padding: \"20px\",\n    borderRadius: \"15px\",\n    marginLeft: \"65%\",\n    wordWrap: \"break-word\",\n    boxSizing: \"border-box\",\n    marginTop: \"10px\",\n    //margin: \"auto\"\n  },\n  messagesOther: {\n    width: \"30%\",\n    background: \"lightgreen\",\n    float: \"left\",\n    clear: \"both\",\n    padding: \"20px\",\n    borderRadius: \"15px\",\n    marginRight: \"65%\",\n    wordWrap: \"break-word\",\n    boxSizing: \"border-box\",\n    marginTop: \"10px\",\n    //margin: \"auto\"\n  },\n  autocompletestyles: {\n    width: \"1000px\",\n    float: \"left\",\n    marginleft: \"-400px\",\n  },\n  buttoncontainer: {\n    marginLeft: \"50px\",\n    marginRight: \"0px\",\n  },\n  button: {\n    height: \"40px\",\n    width: \"100px\",\n  },\n});\n\nexport default newchatStyles;\n","import React from \"react\";\nimport newchatStyles from \"./styles.js\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Button from \"@material-ui/core/Button\";\n\nclass NewChatComponent extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      recipient: \"\",\n    };\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    const chatList = this.props.chats.map(\n      (chat) => chat.users.filter((email) => email != this.props.currentuser)[0]\n    );\n\n    const userList = this.props.users;\n    const friendsList = userList.filter((user) =>\n      chatList.includes(user.email)\n    );\n    //console.log(chatList);\n    //console.log(userList);\n    //console.log(friendsList);\n\n    return (\n      <div>\n        <div className={classes.convoheader}>\n          <Autocomplete\n            id=\"friends-list\"\n            freeSolo\n            clearOnEscape\n            options={friendsList}\n            getOptionLabel={(option) => {\n              if (option.firstname) {\n                return [option.firstname, option.lastname].join(\" \");\n              } else {\n                return option;\n              }\n            }}\n            className={classes.autocompletestyles}\n            edge=\"start\"\n            onChange={(event, value, reason) =>\n              this.onChangeHandler(event, value, reason)\n            }\n            onClose={(event, reason) => {\n              //const recipient = this.state.recipient;\n              this.handleClose(event, this.state.recipient, reason);\n            }}\n            renderInput={(params) => (\n              <TextField {...params} label=\"To:\" variant=\"outlined\" />\n            )}\n          />\n          <div className={classes.buttoncontainer}>\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              className={classes.button}\n              onClick={this.props.logout}\n            >\n              Log Out\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  handleClose = async (event, value, reason) => {\n    //Runs this if user clicks stats typing and clicks off of the autocomplete box\n    if (reason == \"blur\") {\n      console.log(reason);\n      //console.log(value);\n      var autocompleteValue = document.getElementById(\"friends-list\");\n      var thevalue = autocompleteValue.getAttribute(\"value\").trim();\n\n      await this.setState({ recipient: thevalue });\n\n      const chatList = this.props.chats.map(\n        (chat) =>\n          chat.users.filter((email) => email != this.props.currentuser)[0]\n      );\n      if (value == this.props.currentuser) {\n        return;\n      }\n      if (chatList.includes(thevalue) == true) {\n        const selectIndex = chatList.indexOf(this.state.recipient);\n        this.props.setSelectedchatIndex(selectIndex);\n        this.props.setSelectedmessages();\n        this.props.changeSelectedIndexofChatSelector(selectIndex);\n\n        const userList = this.props.users;\n        const friendsList = userList.filter((user) =>\n          chatList.includes(user.email)\n        );\n\n        this.props.setSelectedFirstName(friendsList[selectIndex].firstname);\n        this.props.setSelectedLastName(friendsList[selectIndex].lastname);\n        this.props.setHasRead();\n      } else {\n        this.props.setNewRecipient(this.state.recipient);\n\n        console.log(thevalue);\n        console.log(this.state.recipient);\n      }\n    }\n  };\n\n  onChangeHandler = async (event, value, reason) => {\n    if (value) {\n      if (event.key === \"Enter\") {\n        value = value.trim();\n        if (value == this.props.currentuser) {\n          return;\n        }\n        await this.setState({ recipient: value });\n        const chatList = this.props.chats.map(\n          (chat) =>\n            chat.users.filter((email) => email != this.props.currentuser)[0]\n        );\n        if (chatList.includes(value) == true) {\n          const selectIndex = chatList.indexOf(value);\n          this.props.setSelectedchatIndex(selectIndex);\n          this.props.setSelectedmessages();\n          this.props.changeSelectedIndexofChatSelector(selectIndex);\n\n          const userList = this.props.users;\n          const friendsList = userList.filter((user) =>\n            chatList.includes(user.email)\n          );\n\n          this.props.setSelectedFirstName(friendsList[selectIndex].firstname);\n          this.props.setSelectedLastName(friendsList[selectIndex].lastname);\n          this.props.setHasRead();\n        } else {\n          await this.setState({ recipient: value });\n          this.props.setNewRecipient(this.state.recipient);\n\n          console.log(value);\n          console.log(this.state.recipient);\n        }\n      } else if (reason == \"select-option\") {\n        this.props.setKnownRecipient(true);\n        await this.setState({ recipient: value.email });\n\n        const chatList = this.props.chats.map(\n          (chat) =>\n            chat.users.filter((email) => email != this.props.currentuser)[0]\n        );\n        const selectIndex = chatList.indexOf(this.state.recipient);\n        this.props.setSelectedchatIndex(selectIndex);\n        this.props.setSelectedmessages();\n        this.props.changeSelectedIndexofChatSelector(selectIndex);\n\n        const userList = this.props.users;\n        const friendsList = userList.filter((user) =>\n          chatList.includes(user.email)\n        );\n\n        this.props.setSelectedFirstName(friendsList[selectIndex].firstname);\n        this.props.setSelectedLastName(friendsList[selectIndex].lastname);\n        this.props.setHasRead();\n\n        console.log(reason);\n        console.log(value);\n        console.log(this.state.recipient);\n        console.log(selectIndex);\n\n        //this.setRecipient();\n      } else {\n        //needs to decide what to do if ricipient is new\n        this.props.setKnownRecipient(false);\n        await this.setState({ recipient: value });\n        this.props.setNewRecipient(this.state.recipient);\n\n        console.log(reason);\n        console.log(value);\n        console.log(this.state.recipient);\n      }\n    }\n  };\n\n  componentDidMount = () => {\n    this.props.setKnownRecipient(false);\n    this.props.changeSelectedIndexofChatSelector(null);\n  };\n}\n\nexport default withStyles(newchatStyles)(NewChatComponent);\n","const convodisplayheaderStyles = () => ({\n  main: {\n    width: \"70vw\",\n    height: \"80px\",\n    //height: \"50px\"\n    marginLeft: \"30%\",\n    background: \"#F0F8FF\",\n    padding: \"20px\",\n    position: \"fixed\",\n    zIndex: \"1\",\n    boxSizing: \"border-box\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    borderBottom: \"1px solid grey\",\n  },\n\n  avataruserWrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    padding: \"20px\",\n    boxSizing: \"border-box\",\n    height: \"50px\",\n    width: \"50px\",\n  },\n  name: {\n    padding: \"20px\",\n    boxSizing: \"border-box\",\n  },\n});\n\nexport default convodisplayheaderStyles;\n","import React from \"react\";\nimport convodisplayheaderStyles from \"./styles.js\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport { Avatar } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\n\nclass ConvoDisplayHeaderComponent extends React.Component {\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div>\n        {this.props.hasSelectedOnce ? (\n          <div className={classes.main}>\n            <div className={classes.avataruserWrapper}>\n              <Avatar className={classes.avatar}>\n                {this.props.firstname.charAt(0) + this.props.lastname.charAt(0)}\n              </Avatar>\n              <div className={classes.name}>\n                {this.props.firstname + \" \" + this.props.lastname}\n              </div>\n            </div>\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              className={classes.button}\n              onClick={this.props.logout}\n            >\n              Log Out\n            </Button>\n          </div>\n        ) : (\n          <div className={classes.main}>\n            <div className={classes.avataruserWrapper}> </div>\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              className={classes.button}\n              onClick={this.props.logout}\n            >\n              Log Out\n            </Button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withStyles(convodisplayheaderStyles)(\n  ConvoDisplayHeaderComponent\n);\n","import React from \"react\";\nimport convodisplayStyles from \"./styles.js\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport NewChatComponent from \"../newchat/newchat\";\nimport ConvoDisplayHeaderComponent from \"../convodisplayheader/convodisplayheader\";\n\nclass convodisplayComponent extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      knownRecipient: false,\n    };\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div>\n        {this.props.newChatWindow ? (\n          <div>\n            <NewChatComponent\n              chats={this.props.chats}\n              users={this.props.users}\n              currentuser={this.props.currentuser}\n              setKnownRecipient={this.setKnownRecipient}\n              setSelectedchatIndex={this.props.setSelectedchatIndex}\n              setSelectedmessages={this.props.setSelectedmessages}\n              changeSelectedIndexofChatSelector={\n                this.props.changeSelectedIndexofChatSelector\n              }\n              setNewRecipient={this.props.setNewRecipient}\n              setSelectedFirstName={this.props.setSelectedFirstName}\n              setSelectedLastName={this.props.setSelectedLastName}\n              logout={this.props.logout}\n              setHasRead={this.props.setHasRead}\n            ></NewChatComponent>\n\n            {this.state.knownRecipient ? (\n              <div className={classes.messages} id=\"convodisplay\">\n                {[...this.props.selectedmessages]\n                  .reverse()\n                  .map((messages, index) => {\n                    if (messages.sender === this.props.email) {\n                      return (\n                        <div className={classes.messagesUser} key={index}>\n                          {messages.message}\n                        </div>\n                      );\n                    } else {\n                      return (\n                        <div className={classes.messagesOther} key={index}>\n                          {messages.message}\n                        </div>\n                      );\n                    }\n                  })}\n              </div>\n            ) : (\n              <div className={classes.messages}></div>\n            )}\n          </div>\n        ) : (\n          <div>\n            <div align=\"center\">\n              <ConvoDisplayHeaderComponent\n                className={classes.convoheader}\n                firstname={this.props.selectedFirstName}\n                lastname={this.props.selectedLastName}\n                hasSelectedOnce={this.props.hasSelectedOnce}\n                logout={this.props.logout}\n              ></ConvoDisplayHeaderComponent>\n              {/*this.props.selectedFirstName + \" \" + this.props.selectedLastName*/}\n            </div>\n            <div className={classes.messages} id=\"convodisplay\">\n              {[...this.props.selectedmessages]\n                .reverse()\n                .map((messages, index) => {\n                  if (messages.sender === this.props.email) {\n                    return (\n                      <div className={classes.messagesUser} key={index}>\n                        {messages.message}\n                      </div>\n                    );\n                  } else {\n                    return (\n                      <div className={classes.messagesOther} key={index}>\n                        {messages.message}\n                      </div>\n                    );\n                  }\n                })}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  setKnownRecipient = async (known) => {\n    await this.setState({ knownRecipient: known });\n    //console.log(this.state.knownRecipient);\n  };\n\n  componentDidMount = () => {\n    const container = document.getElementById(\"convodisplay\");\n    if (container) container.scrollTo(0, container.scrollHeight);\n  };\n  componentDidUpdate = () => {\n    const container = document.getElementById(\"convodisplay\");\n    if (container) container.scrollTo(0, container.scrollHeight);\n  };\n\n  /*componentDidMount = () => {\n    firebase.auth().onAuthStateChanged(async user => {\n      if (user) {\n        this.setState({ email: user.email });\n\n        await firebase\n          .firestore()\n          .collection(\"chats\")\n          .where(\"users\", \"array-contains\", user.email)\n          .get()\n          .then(async snapshot => {\n            console.log(\n              snapshot.docs[this.props.selectedchatIndex].data().messages\n            );\n            await this.setState({\n              selectedchat: snapshot.docs[this.props.selectedchatIndex].data()\n                .messages\n            });\n          })\n          .catch(err => {\n            console.log(\"Error getting documents\", err);\n          });\n      }\n    });\n  };*/\n}\n\nexport default withStyles(convodisplayStyles)(convodisplayComponent);\n","const chatinputStyles = () => ({\n  main: {\n    width: \"70vw\",\n    marginLeft: \"30%\",\n    //background: \"violet\",\n    padding: \"10px\",\n    position: \"fixed\",\n    zIndex: \"1\",\n    bottom: 0,\n    height: \"70px\",\n    boxSizing: \"border-box\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    borderTop: \"1px solid grey\",\n    background: \"#F0F8FF\",\n  },\n  chatTextBox: {\n    width: \"87%\",\n    marginLeft: \"30px\",\n    marginRight: \"30px\",\n    border: \"1px solid grey\",\n    borderRadius: \"5px\",\n    padding: \"5px\",\n  },\n  buttonstyle: {\n    height: \"40px\",\n  },\n});\n\nexport default chatinputStyles;\n","import React from \"react\";\nimport chatinputStyles from \"./styles.js\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\n\nclass ChatInputComponent extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      message: \"\",\n    };\n  }\n\n  render() {\n    const { classes } = this.props;\n    /*if (this.props.hasSelectedOnce == true) {\n      return (\n        <div className={classes.main}>\n          <TextField\n            id=\"chatTextBox\"\n            className={classes.chatTextBox}\n            onChange={this.handleInputChange}\n            value={this.state.message}\n            onKeyDown={this.onKeyDownHandler}\n            autoComplete=\"off\"\n          ></TextField>\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            onClick={this.sendMessage}\n          >\n            Send\n          </Button>\n        </div>\n      );\n    } else {\n      return <div className={classes.main}></div>;\n    }*/\n    return (\n      <div className={classes.main}>\n        <TextField\n          id=\"chatTextBox\"\n          className={classes.chatTextBox}\n          onChange={this.handleInputChange}\n          value={this.state.message}\n          onKeyDown={this.onKeyDownHandler}\n          autoComplete=\"off\"\n          onFocus={this.onFocusHandler}\n        ></TextField>\n        <Button color=\"primary\" variant=\"contained\" onClick={this.sendMessage}>\n          Send\n        </Button>\n      </div>\n    );\n  }\n\n  onFocusHandler = () => {\n    this.props.setHasRead();\n  };\n\n  onKeyDownHandler = (e) => {\n    if (e.key === \"Enter\") {\n      this.sendMessage();\n    }\n  };\n  sendMessage = async () => {\n    this.props.sendMessage(this.state.message);\n    await this.setState({ message: \"\" });\n  };\n\n  handleInputChange = async (e) => {\n    await this.setState({ message: e.target.value });\n    //console.log(this.state.message);\n  };\n}\n\nexport default withStyles(chatinputStyles)(ChatInputComponent);\n","import React from \"react\";\nimport ChatSelectorComponent from \"../chatselector/chatselector\";\nimport dashboardStyles from \"./styles.js\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport ConvodisplayComponent from \"../convodisplay/convodisplay\";\nimport ChatInputComponent from \"../chatinput/chatinput\";\nimport NewChatComponent from \"../newchat/newchat\";\n\nconst firebase = require(\"firebase\");\n\nclass DashboardComponent extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: \"\",\n      users: [],\n      chats: [],\n      selectedchatIndex: 0,\n      selectedmessages: [],\n      hasSelectedOnce: false,\n      newChatWindow: true,\n      newRecipient: \"\",\n      selectedFirstName: \"\",\n      selectedLastName: \"\",\n    };\n    //ref so that dashboard can access chatselector methods\n    this.chatSelectorComponent = React.createRef();\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    if (this.state.email) {\n      return (\n        <div className={classes.main}>\n          <ChatSelectorComponent\n            chats={this.state.chats}\n            currentuser={this.state.email}\n            setSelectedchatIndex={this.setSelectedchatIndex}\n            setSelectedmessages={this.setSelectedmessages}\n            changeSelectedIndexofChatSelector={\n              this.changeSelectedIndexofChatSelector\n            }\n            displayNewChatWindow={this.displayNewChatWindow}\n            setHasSelectedOnce={this.setHasSelectedOnce}\n            users={this.state.users}\n            //creating ref so that dashboard can access the selectedindex state\n            ref={this.chatSelectorComponent}\n            //for the chat header of the convodisplay component\n            setSelectedFirstName={this.setSelectedFirstName}\n            setSelectedLastName={this.setSelectedLastName}\n            setHasRead={this.setHasRead}\n          ></ChatSelectorComponent>\n\n          <ConvodisplayComponent\n            email={this.state.email}\n            selectedmessages={this.state.selectedmessages}\n            //for newchatComponent\n            chats={this.state.chats}\n            users={this.state.users}\n            currentuser={this.state.email}\n            newChatWindow={this.state.newChatWindow}\n            setSelectedchatIndex={this.setSelectedchatIndex}\n            setSelectedmessages={this.setSelectedmessages}\n            changeSelectedIndexofChatSelector={\n              this.changeSelectedIndexofChatSelector\n            }\n            setNewRecipient={this.setNewRecipient}\n            selectedFirstName={this.state.selectedFirstName}\n            selectedLastName={this.state.selectedLastName}\n            setSelectedFirstName={this.setSelectedFirstName}\n            setSelectedLastName={this.setSelectedLastName}\n            hasSelectedOnce={this.state.hasSelectedOnce}\n            logout={this.logout}\n            setHasRead={this.setHasRead}\n          ></ConvodisplayComponent>\n\n          <ChatInputComponent\n            sendMessage={this.sendMessage}\n            hasSelectedOnce={this.state.hasSelectedOnce}\n            newChatWindow={this.state.newChatWindow}\n            setHasRead={this.setHasRead}\n          ></ChatInputComponent>\n        </div>\n      );\n    } else {\n      //this.props.history.push(\"/login\");\n      return <div></div>;\n    }\n  }\n\n  setHasRead = () => {\n    const docName = this.getDocName();\n    const messageLength = this.state.chats[this.state.selectedchatIndex]\n      .messages.length;\n    const lastSender = this.state.chats[this.state.selectedchatIndex].messages[\n      messageLength - 1\n    ].sender;\n\n    console.log(lastSender);\n\n    if (lastSender !== this.state.email) {\n      firebase\n        .firestore()\n        .collection(\"chats\")\n        .doc(docName)\n        .update({ hasRead: true });\n    } else {\n      console.log(\"I sent the last message\");\n    }\n  };\n\n  logout = () => {\n    firebase.auth().signOut();\n    this.props.history.push(\"/login\");\n    console.log(\"loggedout\");\n  };\n\n  setSelectedFirstName = async (firstname) => {\n    await this.setState({ selectedFirstName: firstname });\n    console.log(this.state.selectedFirstName);\n  };\n\n  setSelectedLastName = async (lastname) => {\n    await this.setState({ selectedLastName: lastname });\n    console.log(this.state.selectedLastName);\n  };\n\n  setNewRecipient = async (recipient) => {\n    await this.setState({ newRecipient: recipient });\n  };\n\n  //To change highlighted selection in the chatselector after a\n  //existing chat is selected from the new chat autocomplete box\n  changeSelectedIndexofChatSelector = (index) => {\n    this.chatSelectorComponent.current.setSelectedIndex(index);\n  };\n\n  displayNewChatWindow = async () => {\n    await this.setState({ newChatWindow: true });\n  };\n\n  sendMessage = async (message) => {\n    if (this.state.newChatWindow == true) {\n      console.log(\"newchatwindow\");\n      console.log(this.state.newRecipient);\n      if (await this.validRecipient()) {\n        if (message.replace(/\\s/g, \"\").length) {\n          const newRecipientDocName = this.buildNewRecipientDocName();\n          await firebase\n            .firestore()\n            .collection(\"chats\")\n            .doc(newRecipientDocName)\n            .set({\n              messages: [\n                {\n                  message: message,\n                  sender: this.state.email,\n                  timestamp: Date.now(),\n                },\n              ],\n              users: [this.state.email, this.state.newRecipient],\n              hasRead: false,\n            });\n          //sets which chat selection is highlighted\n          this.changeSelectedIndexofChatSelector(\n            this.findIndexOfRecipient(this.state.newRecipient)\n          );\n          await this.setState({ newChatWindow: false });\n          //sets the proper conversation\n          this.setSelectedchatIndex(\n            this.findIndexOfRecipient(this.state.newRecipient)\n          );\n          this.setSelectedmessages();\n          console.log(this.findIndexOfRecipient(this.state.newRecipient));\n\n          this.setFirstAndLastName(\n            this.findIndexOfRecipient(this.state.newRecipient)\n          );\n          //console.log(\"yo\");\n        }\n      } else {\n        console.log(\"NOT A VALID EMAIL\");\n      }\n    } else {\n      if (message.replace(/\\s/g, \"\").length) {\n        const docName = this.getDocName();\n        firebase\n          .firestore()\n          .collection(\"chats\")\n          .doc(docName)\n          .update({\n            messages: firebase.firestore.FieldValue.arrayUnion({\n              message: message,\n              sender: this.state.email,\n              timestamp: Date.now(),\n            }),\n            hasRead: false,\n          })\n          .then(console.log(\"Message Sent\"));\n      }\n    }\n  };\n\n  setFirstAndLastName = (index) => {\n    const chatList = this.state.chats.map(\n      (chat) => chat.users.filter((email) => email != this.state.email)[0]\n    );\n    const userList = this.state.users;\n    const friendsList = userList.filter((user) =>\n      chatList.includes(user.email)\n    );\n    this.setSelectedFirstName(friendsList[index].firstname);\n    this.setSelectedLastName(friendsList[index].lastname);\n  };\n\n  findIndexOfRecipient = (recipient) => {\n    const chatList = this.state.chats.map(\n      (chat) => chat.users.filter((email) => email != this.state.email)[0]\n    );\n    const selectIndex = chatList.indexOf(recipient);\n    return selectIndex;\n  };\n\n  buildNewRecipientDocName = () => {\n    const newRecipientDocName = [this.state.email, this.state.newRecipient]\n      .sort()\n      .join(\":\");\n    return newRecipientDocName;\n  };\n\n  validRecipient = async () => {\n    //Checking if the user is a valid user\n    const getUsers = await firebase.firestore().collection(\"users\").get();\n    const users = getUsers.docs.map((doc) => doc.data().email);\n    var valid = users.includes(this.state.newRecipient);\n    console.log(valid);\n\n    return valid;\n  };\n\n  getDocName = () => {\n    const selectedUser = this.state.chats[\n      this.state.selectedchatIndex\n    ].users.filter((email) => email != this.state.email);\n    const docName = [this.state.email, selectedUser].sort().join(\":\");\n    //console.log(docName);\n    return docName;\n  };\n\n  setHasSelectedOnce = async () => {\n    //After the first selection, the chat input box should appear and stay there\n    await this.setState({ hasSelectedOnce: true });\n  };\n\n  setSelectedchatIndex = (index) => {\n    this.setState({ selectedchatIndex: index });\n\n    //After the first selection, the chat input box should appear and stay there\n    this.setHasSelectedOnce();\n\n    this.setState({ newChatWindow: false });\n    //console.log(this.state.selectedchatIndex);\n    console.log(this.state.chats[this.state.selectedchatIndex].users);\n  };\n\n  setSelectedmessages = () => {\n    this.setState({\n      selectedmessages: this.state.chats[this.state.selectedchatIndex].messages,\n    });\n    //console.log(this.state.chats[this.state.selectedchatIndex].messages);\n  };\n\n  componentWillMount = () => {\n    firebase.auth().onAuthStateChanged(async (user) => {\n      if (user) {\n        this.setState({ email: user.email });\n        console.log(user.email);\n        await firebase\n          .firestore()\n          .collection(\"chats\")\n          .where(\"users\", \"array-contains\", user.email)\n          .onSnapshot(async (docSnapshot) => {\n            const thechats = docSnapshot.docs.map((doc) => doc.data());\n            //console.log(thechats);\n            await this.setState({ chats: thechats });\n\n            if (this.state.hasSelectedOnce === true) {\n              this.setSelectedmessages();\n            }\n          });\n        await firebase\n          .firestore()\n          .collection(\"users\")\n          .onSnapshot(async (docSnapshot) => {\n            const theusers = docSnapshot.docs.map((doc) => doc.data());\n            await this.setState({ users: theusers });\n          });\n      }\n    });\n  };\n}\n\nexport default withStyles(dashboardStyles)(DashboardComponent);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Route, HashRouter as Router } from \"react-router-dom\";\nimport LoginComponent from \"./login/login\";\nimport SignupComponent from \"./signup/signup\";\nimport DashboardComponent from \"./dashboard/dashboard\";\n\nconst firebase = require(\"firebase\");\nrequire(\"firebase/firestore\");\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyBF3SHP38ZZGBEGhmmiXD-N50MwE6taL7w\",\n  authDomain: \"messaging-app-dc03d.firebaseapp.com\",\n  databaseURL: \"https://messaging-app-dc03d.firebaseio.com\",\n  projectId: \"messaging-app-dc03d\",\n  storageBucket: \"messaging-app-dc03d.appspot.com\",\n  messagingSenderId: \"462664318963\",\n  appId: \"1:462664318963:web:abef1551f827da1da09c86\",\n  measurementId: \"G-XPQFN9TSD9\",\n});\n\nconst routing = (\n  <Router>\n    <div id=\"routing-container\">\n      <Route path=\"/\" exact component={LoginComponent}></Route>\n      <Route path=\"/login\" component={LoginComponent}></Route>\n      <Route path=\"/signup\" component={SignupComponent}></Route>\n      <Route path=\"/dashboard\" component={DashboardComponent}></Route>\n    </div>\n  </Router>\n);\n\nReactDOM.render(routing, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}